#region Namespaces
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using Autodesk.Revit.ApplicationServices;
using Autodesk.Revit.Attributes;
using Autodesk.Revit.DB;
using Autodesk.Revit.UI;
using Autodesk.Revit.UI.Selection;
#endregion

namespace SaveSolidToFileSample
{
    [Transaction(TransactionMode.Manual)]
    public class Command : IExternalCommand
    {
        public Result Execute(
          ExternalCommandData commandData,
          ref string message,
          ElementSet elements)
        {
            UIApplication uiapp = commandData.Application;
            UIDocument uidoc = uiapp.ActiveUIDocument;
            Application app = uiapp.Application;
            Document doc = uidoc.Document;

            // Access current selection

            Selection sel = uidoc.Selection;

           

            // get floors from the model
            var floors =
               new FilteredElementCollector(doc)
                .OfClass(typeof(Floor))
                .ToElements()
                .Cast<Floor>()
                .ToList();

            if (floors.Count != 2)
            {
                message = "Please create two intersected floors";
                return Result.Failed;
            }

            // get the floors solids
            var geometry1 = floors[0].get_Geometry(new Options());
            var geometry2 = floors[1].get_Geometry(new Options());

            var solid1 = geometry1.FirstOrDefault() as Solid;
            var solid2 = geometry2.FirstOrDefault() as Solid;


            // get the solid, generated by floor intersecting
            var intersectedSolid =
                BooleanOperationsUtils.ExecuteBooleanOperation(solid1, solid2, BooleanOperationsType.Intersect);

            // create new family
            var assembly = Assembly.GetExecutingAssembly();
            var fi = new FileInfo(Assembly.GetExecutingAssembly().Location);
            

            var templatePath = Path.Combine(fi.DirectoryName, "Metric Mass.rft");
            var familyDocument = app.NewFamilyDocument(templatePath);

            //create free form element
            using (var t = new Transaction(familyDocument, "Add Free Form Element"))
            {
                t.Start();
                var freeFormElement = Autodesk.Revit.DB.FreeFormElement.Create(familyDocument, intersectedSolid);
                t.Commit();
            }

            familyDocument.SaveAs(Path.Combine(fi.DirectoryName, "new family.rfa"), new SaveAsOptions(){OverwriteExistingFile = true});
            
            // create 3d view
            var viewFamilyType = new FilteredElementCollector(familyDocument)
                .OfClass(typeof(ViewFamilyType))
                .OfType<ViewFamilyType>()
                .FirstOrDefault(x => x.ViewFamily
                                     == ViewFamily.ThreeDimensional);
            View3D threeDView;
            using (var t = new Transaction(familyDocument, "Create 3d view"))
            {
                t.Start();

                threeDView = View3D.CreateIsometric(
                    familyDocument, viewFamilyType.Id);
                t.Commit();
            }
            // Export to Sat
            var viewSet = new List<ElementId>()
                {
                    threeDView.Id
                };
            SATExportOptions exportOptions = new SATExportOptions();


            var res = familyDocument.Export(fi.DirectoryName, "SolidFile.sat", viewSet, exportOptions);


            return Result.Succeeded;
        }
    }
}
